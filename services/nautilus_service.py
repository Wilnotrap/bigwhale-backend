import requests
import json
from datetime import datetime, timedelta

class NautilusService:
    """
    Servi√ßo para integra√ß√£o com o sistema Nautilus
    """
    
    def __init__(self):
        self.base_url = "https://bw.mdsa.com.br"
        self.admin_email = "admin@bigwhale.com"
        self.admin_password = "bigwhale"
        self.token = None
        self.user_id = None
        self.token_expires_at = None
    
    def authenticate(self):
        """
        Autentica com o sistema Nautilus e obt√©m token de acesso
        """
        try:
            url = f"{self.base_url}/login"
            
            login_data = {
                "email": self.admin_email,
                "password": self.admin_password
            }
            
            response = requests.post(
                url,
                json=login_data,
                headers={
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get('token')
                self.user_id = data.get('userId')
                
                # Assumindo que o token expira em 4 horas (padr√£o JWT)
                self.token_expires_at = datetime.now() + timedelta(hours=4)
                
                return {
                    'success': True,
                    'token': self.token,
                    'user_id': self.user_id
                }
            else:
                return {
                    'success': False,
                    'error': f'Authentication failed: HTTP {response.status_code}',
                    'details': response.text
                }
                
        except Exception as e:
            return {
                'success': False,
                'error': f'Authentication error: {str(e)}'
            }
    
    def is_token_valid(self):
        """
        Verifica se o token atual ainda √© v√°lido
        """
        if not self.token or not self.token_expires_at:
            return False
        
        # Considera v√°lido se ainda tem pelo menos 5 minutos
        return datetime.now() < (self.token_expires_at - timedelta(minutes=5))
    
    def ensure_authenticated(self):
        """
        Garante que temos um token v√°lido, renovando se necess√°rio
        """
        if not self.is_token_valid():
            return self.authenticate()
        
        return {
            'success': True,
            'token': self.token,
            'user_id': self.user_id
        }
    
    def get_nautilus_credentials(self):
        """
        Obt√©m token e user_id do sistema Nautilus para um novo usu√°rio
        
        Returns:
            dict: Resultado da opera√ß√£o com token e user_id
        """
        try:
            # Fazer autentica√ß√£o para obter token e user_id
            auth_result = self.authenticate()
            
            if auth_result['success']:
                return {
                    'success': True,
                    'token': auth_result['token'],
                    'nautilus_user_id': auth_result['user_id'],
                    'message': 'Credenciais Nautilus obtidas com sucesso'
                }
            else:
                return {
                    'success': False,
                    'error': 'Falha ao obter credenciais do Nautilus',
                    'details': auth_result.get('error')
                }
                
        except Exception as e:
            return {
                'success': False,
                'error': f'Erro ao conectar com Nautilus: {str(e)}'
            }
    
    def send_user_data_to_nautilus(self, user_data):
        """
        Envia dados do usu√°rio para o servidor Nautilus - L√ìGICA CORRIGIDA
        
        Args:
            user_data (dict): Dados do usu√°rio contendo:
                - full_name: Nome completo
                - email: Email do usu√°rio
                - bitget_api_key: Chave API da Bitget
                - bitget_api_secret: Secret API da Bitget
                - bitget_passphrase: Passphrase da API Bitget
        
        Returns:
            dict: Resultado do envio dos dados
        """
        try:
            print("=" * 80)
            print("üöÄ NAUTILUS - INICIANDO ENVIO DE DADOS")
            print("=" * 80)
            
            # Primeiro, garantir que temos credenciais v√°lidas
            auth_result = self.ensure_authenticated()
            if not auth_result['success']:
                print(f"‚ùå NAUTILUS - Falha na autentica√ß√£o: {auth_result.get('error')}")
                return auth_result
            
            print(f"‚úÖ NAUTILUS - Autentica√ß√£o confirmada")
            print(f"üé´ Token: {self.token[:20] if self.token else 'N/A'}...")
            print(f"üÜî User ID: {self.user_id}")
            
            # Calcular data de expira√ß√£o (30 dias ap√≥s cadastro)
            expiration_date = (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d')
            
            # Preparar dados no formato esperado pelo servidor Nautilus
            nautilus_data = {
                "name": user_data.get('full_name'),
                "email": user_data.get('email'),
                "password": user_data.get('password', '123456'),
                "apiKey": user_data.get('bitget_api_key'),
                "apiSecret": user_data.get('bitget_api_secret'),
                "apiPass": user_data.get('bitget_passphrase'),
                "expirationDate": expiration_date,
                "defaultEntryPercentage": "5",
                "status": "active"
            }
            
            # Headers com token e ID conforme especificado
            headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': f'{self.token}',
                'auth-userid': str(self.user_id)
            }
            
            # Endpoint para envio dos dados do usu√°rio
            url = f"{self.base_url}/user"
            
            print(f"üì° NAUTILUS - URL: {url}")
            print(f"üë§ NAUTILUS - Usu√°rio: {nautilus_data.get('name')} ({nautilus_data.get('email')})")
            print(f"üîë NAUTILUS - API Key: {nautilus_data.get('apiKey')[:10]}..." if nautilus_data.get('apiKey') else "N/A")
            print("üì§ NAUTILUS - Enviando requisi√ß√£o...")
            
            # Enviar dados para o Nautilus
            response = requests.post(
                url,
                data=json.dumps(nautilus_data),
                headers=headers,
                timeout=30
            )
            
            print(f"üìä NAUTILUS - Status da resposta: {response.status_code}")
            print(f"üìÑ NAUTILUS - Conte√∫do da resposta: {response.text}")
            print(f"üìã NAUTILUS - Headers da resposta: {dict(response.headers)}")
            
            # L√ìGICA CORRIGIDA - An√°lise rigorosa da resposta
            print("üîç NAUTILUS - Analisando resposta...")
            
            if response.status_code in [200, 201]:
                print("üéâ NAUTILUS - SUCESSO CONFIRMADO!")
                print(f"‚úÖ NAUTILUS - Status {response.status_code} = USU√ÅRIO CRIADO")
                
                # Tentar extrair dados da resposta
                nautilus_response_data = None
                try:
                    nautilus_response_data = response.json()
                    user_id_created = nautilus_response_data.get('id', 'N/A')
                    print(f"üÜî NAUTILUS - ID do usu√°rio criado: {user_id_created}")
                except Exception as parse_error:
                    print(f"‚ö†Ô∏è NAUTILUS - Erro ao parsear JSON: {parse_error}")
                
                success_result = {
                    'success': True,
                    'message': 'Dados do usu√°rio enviados para Nautilus com sucesso',
                    'nautilus_response': nautilus_response_data,
                    'nautilus_user_created_id': nautilus_response_data.get('id') if nautilus_response_data else None
                }
                
                print("‚úÖ NAUTILUS - Retornando SUCESSO para o endpoint")
                print(f"üì¶ NAUTILUS - Resultado: {success_result}")
                print("=" * 80)
                
                return success_result
            
            elif response.status_code == 400:
                # Analisar erro 400 espec√≠fico
                response_text = response.text.strip('"')
                print(f"‚ö†Ô∏è NAUTILUS - Erro 400 detectado: {response_text}")
                
                # Verificar se √© erro de duplicata
                if 'SequelizeUniqueConstraintError' in response_text or 'Validation error' in response_text:
                    
                    # Identificar qual campo est√° duplicado
                    error_details = "Dados j√° existem no sistema Nautilus"
                    if 'email' in response_text.lower():
                        error_details += " - Email j√° cadastrado"
                    elif 'apikey' in response_text.lower() or 'api' in response_text.lower():
                        error_details += " - Credenciais API da Bitget j√° cadastradas"
                    
                    print(f"üö´ NAUTILUS - Erro de duplicata: {error_details}")
                    
                    error_result = {
                        'success': False,
                        'error': error_details,
                        'error_type': 'duplicate_data',
                        'details': response_text,
                        'user_message': 'Este email ou suas credenciais da Bitget j√° est√£o cadastrados no sistema. Se voc√™ j√° possui uma conta, fa√ßa login.'
                    }
                    
                    print(f"‚ùå NAUTILUS - Retornando ERRO de duplicata")
                    print(f"üì¶ NAUTILUS - Resultado: {error_result}")
                    print("=" * 80)
                    
                    return error_result
                else:
                    # Outros erros de valida√ß√£o
                    print(f"‚ùå NAUTILUS - Erro de valida√ß√£o: {response_text}")
                    
                    validation_result = {
                        'success': False,
                        'error': f'Erro de valida√ß√£o no Nautilus: {response_text}',
                        'error_type': 'validation_error',
                        'details': response_text
                    }
                    
                    print(f"‚ùå NAUTILUS - Retornando ERRO de valida√ß√£o")
                    print(f"üì¶ NAUTILUS - Resultado: {validation_result}")
                    print("=" * 80)
                    
                    return validation_result
            
            else:
                # Outros c√≥digos de erro HTTP
                print(f"‚ùå NAUTILUS - Erro HTTP {response.status_code}: {response.text}")
                
                http_error_result = {
                    'success': False,
                    'error': f'Falha ao enviar dados para Nautilus: HTTP {response.status_code}',
                    'details': response.text,
                    'response_headers': dict(response.headers)
                }
                
                print(f"‚ùå NAUTILUS - Retornando ERRO HTTP")
                print(f"üì¶ NAUTILUS - Resultado: {http_error_result}")
                print("=" * 80)
                
                return http_error_result
                
        except requests.exceptions.Timeout:
            print("‚è±Ô∏è NAUTILUS - Timeout na requisi√ß√£o")
            timeout_result = {
                'success': False,
                'error': 'Timeout na comunica√ß√£o com o servidor Nautilus',
                'error_type': 'timeout'
            }
            print("=" * 80)
            return timeout_result
            
        except requests.exceptions.ConnectionError:
            print("üîå NAUTILUS - Erro de conex√£o")
            connection_result = {
                'success': False,
                'error': 'Falha na conex√£o com o servidor Nautilus',
                'error_type': 'connection_error'
            }
            print("=" * 80)
            return connection_result
            
        except Exception as e:
            print(f"üí• NAUTILUS - Erro inesperado: {str(e)}")
            exception_result = {
                'success': False,
                'error': f'Erro inesperado ao conectar com Nautilus: {str(e)}',
                'error_type': 'unexpected_error'
            }
            print("=" * 80)
            return exception_result
    
    def register_user_in_nautilus(self, user_data):
        """
        Registra um usu√°rio no sistema Nautilus (m√©todo legado - mantido para compatibilidade)
        Agora apenas obt√©m as credenciais do Nautilus
        
        Args:
            user_data (dict): Dados do usu√°rio para registro
        
        Returns:
            dict: Resultado do registro
        """
        # Por enquanto, apenas obt√©m as credenciais do Nautilus
        # Futuramente pode ser expandido para enviar dados do usu√°rio
        return self.get_nautilus_credentials()
    
    def sync_user_data(self, user_email, trade_data=None):
        """
        Sincroniza dados do usu√°rio com o Nautilus
        
        Args:
            user_email (str): Email do usu√°rio
            trade_data (dict, optional): Dados de trade para sincroniza√ß√£o
        
        Returns:
            dict: Resultado da sincroniza√ß√£o
        """
        # Garantir autentica√ß√£o
        auth_result = self.ensure_authenticated()
        if not auth_result['success']:
            return auth_result
        
        try:
            url = f"{self.base_url}/api/users/sync"
            
            sync_data = {
                "email": user_email,
                "platform": "BitNova",
                "sync_timestamp": datetime.now().isoformat()
            }
            
            if trade_data:
                sync_data["trade_data"] = trade_data
            
            headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': f'Bearer {self.token}'
            }
            
            response = requests.post(
                url,
                json=sync_data,
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                return {
                    'success': True,
                    'message': 'Dados sincronizados com sucesso',
                    'data': response.json()
                }
            else:
                return {
                    'success': False,
                    'error': f'Sync failed: HTTP {response.status_code}',
                    'details': response.text
                }
                
        except Exception as e:
            return {
                'success': False,
                'error': f'Sync error: {str(e)}'
            }

# Inst√¢ncia global do servi√ßo
nautilus_service = NautilusService()