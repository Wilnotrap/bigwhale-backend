#!/usr/bin/env pwsh
# Script para atualizar o reposit√≥rio GitHub com o backend corrigido

Write-Host "üöÄ BigWhale Backend - Atualizador GitHub" -ForegroundColor Green
Write-Host "=========================================" -ForegroundColor Green
Write-Host ""

# Verificar se o Git est√° instalado
try {
    git --version | Out-Null
    Write-Host "‚úÖ Git encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Git n√£o encontrado. Instale o Git primeiro." -ForegroundColor Red
    Write-Host "Download: https://git-scm.com/download/windows" -ForegroundColor Yellow
    exit 1
}

# Diret√≥rio atual
$currentDir = Get-Location
$backendDir = "$currentDir"

Write-Host "üìÅ Diret√≥rio atual: $backendDir" -ForegroundColor Cyan
Write-Host ""

# Verificar se os arquivos necess√°rios existem
$requiredFiles = @("app.py", "Procfile", "requirements.txt")
$missingFiles = @()

foreach ($file in $requiredFiles) {
    if (Test-Path "$backendDir\$file") {
        Write-Host "‚úÖ $file encontrado" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file n√£o encontrado" -ForegroundColor Red
        $missingFiles += $file
    }
}

if ($missingFiles.Count -gt 0) {
    Write-Host ""
    Write-Host "‚ùå Arquivos obrigat√≥rios n√£o encontrados:" -ForegroundColor Red
    $missingFiles | ForEach-Object { Write-Host "   - $_" -ForegroundColor Red }
    Write-Host "Execute este script no diret√≥rio backend-deploy-render" -ForegroundColor Yellow
    exit 1
}

Write-Host ""
Write-Host "üîÑ Iniciando processo de atualiza√ß√£o..." -ForegroundColor Yellow
Write-Host ""

# Criar diret√≥rio tempor√°rio
$tempDir = "$env:TEMP\bigwhale-backend-update"
if (Test-Path $tempDir) {
    Remove-Item $tempDir -Recurse -Force
}
New-Item -ItemType Directory -Path $tempDir | Out-Null

Write-Host "üì• Clonando reposit√≥rio GitHub..." -ForegroundColor Cyan
try {
    Set-Location $tempDir
    git clone https://github.com/Wilnotrap/bigwhale-backend.git
    Set-Location "$tempDir\bigwhale-backend"
    Write-Host "‚úÖ Reposit√≥rio clonado com sucesso" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao clonar reposit√≥rio" -ForegroundColor Red
    Write-Host "Verifique sua conex√£o com a internet e acesso ao GitHub" -ForegroundColor Yellow
    Set-Location $currentDir
    exit 1
}

Write-Host ""
Write-Host "üìù Copiando arquivos corrigidos..." -ForegroundColor Cyan

# Copiar arquivos
try {
    Copy-Item "$backendDir\app.py" -Destination "$tempDir\bigwhale-backend\app.py" -Force
    Copy-Item "$backendDir\Procfile" -Destination "$tempDir\bigwhale-backend\Procfile" -Force
    Copy-Item "$backendDir\requirements.txt" -Destination "$tempDir\bigwhale-backend\requirements.txt" -Force
    
    Write-Host "‚úÖ app.py copiado" -ForegroundColor Green
    Write-Host "‚úÖ Procfile copiado" -ForegroundColor Green
    Write-Host "‚úÖ requirements.txt copiado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao copiar arquivos" -ForegroundColor Red
    Set-Location $currentDir
    exit 1
}

Write-Host ""
Write-Host "üì§ Fazendo commit e push..." -ForegroundColor Cyan

try {
    # Configurar Git (caso n√£o esteja configurado)
    git config user.name "BigWhale Deploy" 2>$null
    git config user.email "deploy@bigwhale.com" 2>$null
    
    # Adicionar arquivos
    git add app.py Procfile requirements.txt
    
    # Verificar se h√° mudan√ßas
    $changes = git diff --cached --name-only
    if ($changes) {
        Write-Host "üìã Arquivos modificados:" -ForegroundColor Yellow
        $changes | ForEach-Object { Write-Host "   - $_" -ForegroundColor Yellow }
        
        # Fazer commit
        $commitMessage = "fix: Corrigir backend para deploy no Render com PostgreSQL

- Corrigir Procfile (app:application)
- Adicionar suporte completo ao PostgreSQL
- Preservar dados existentes no banco
- Adicionar psycopg2-binary para PostgreSQL
- Configurar detec√ß√£o autom√°tica de ambiente
- Adicionar endpoints essenciais
- Configurar CORS para bwhale.site"
        
        git commit -m $commitMessage
        
        Write-Host ""
        Write-Host "üöÄ Fazendo push para GitHub..." -ForegroundColor Cyan
        git push origin main
        
        Write-Host "‚úÖ Push realizado com sucesso!" -ForegroundColor Green
    } else {
        Write-Host "‚ÑπÔ∏è Nenhuma mudan√ßa detectada" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "‚ùå Erro durante commit/push" -ForegroundColor Red
    Write-Host "Voc√™ pode precisar fazer login no GitHub ou configurar SSH" -ForegroundColor Yellow
    Write-Host "Tente fazer o push manualmente:" -ForegroundColor Yellow
    Write-Host "   cd $tempDir\bigwhale-backend" -ForegroundColor Cyan
    Write-Host "   git push origin main" -ForegroundColor Cyan
}

# Voltar ao diret√≥rio original
Set-Location $currentDir

Write-Host ""
Write-Host "üéâ Processo conclu√≠do!" -ForegroundColor Green
Write-Host "=========================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "1. Acesse https://dashboard.render.com" -ForegroundColor White
Write-Host "2. Encontre o servi√ßo 'bigwhale-backend'" -ForegroundColor White
Write-Host "3. Aguarde o deploy autom√°tico (2-5 minutos)" -ForegroundColor White
Write-Host "4. Teste: https://bigwhale-backend.onrender.com/api/health" -ForegroundColor White
Write-Host ""
Write-Host "üîó Links √∫teis:" -ForegroundColor Cyan
Write-Host "   GitHub: https://github.com/Wilnotrap/bigwhale-backend" -ForegroundColor Blue
Write-Host "   Render: https://dashboard.render.com" -ForegroundColor Blue
Write-Host "   Backend: https://bigwhale-backend.onrender.com" -ForegroundColor Blue
Write-Host ""
Write-Host "‚ú® Seu backend deve estar funcionando em alguns minutos!" -ForegroundColor Green

# Limpeza
if (Test-Path $tempDir) {
    Remove-Item $tempDir -Recurse -Force -ErrorAction SilentlyContinue
}